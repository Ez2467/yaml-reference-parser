#!/usr/bin/env node
// Generated by CoffeeScript 2.5.1
(function() {
  //!/usr/bin/env coffee
  var argv, events, main;

  require('../lib/prelude');

  require('../lib/parser');

  require('../lib/test-receiver');

  events = false;

  main = function(yaml = file_read('-')) {
    var calls, e, i, k, len, n, parser, pass, ref, sorted, start, time;
    parser = new Parser(new TestReceiver());
    pass = true;
    start = timer();
    try {
      parser.parse(yaml);
    } catch (error) {
      e = error;
      warn(e);
      pass = false;
    }
    time = timer(start);
    if (yaml.match(/\n./)) {
      n = "\n";
    } else {
      n = '';
      yaml = yaml.replace(/\n$/, '\\n');
    }
    if (events) {
      out(parser.receiver.output());
      return true;
    }
    if (process.env.STATS) {
      sorted = {};
      ({calls} = parser.stats);
      ref = Object.keys(calls).sort(function(a, b) {
        return calls[a] - calls[b];
      });
      for (i = 0, len = ref.length; i < len; i++) {
        k = ref[i];
        sorted[k] = calls[k];
      }
      WWW(sorted);
    }
    if (pass) {
      say(`PASS - '${n}${yaml}'`);
      say(parser.receiver.output);
      say(sprintf("Parse time %.5fs", time));
      return true;
    } else {
      say(`FAIL - '${n}${yaml}'`);
      say(parser.receiver.output);
      say(sprintf("Parse time %.5fs", time));
      return false;
    }
  };

  argv = process.argv.slice(2);

  if (argv.length && argv[0] === '--events') {
    events = true;
    argv.shift();
  }

  if (main(...argv)) {
    exit(0);
  } else {
    exit(1);
  }

  // vim: sw=2:

}).call(this);
